local si        = require 'helper.simple_input'
local monarch   = require "monarch.monarch"
local light_and_shadows = require "light_and_shadows.light_and_shadows"
local broadcast = require 'helper.broadcast'
local virtual_stick = require 'helper.virtual_stick'

local current_example = 3
local total = 4

local function text_upd()
    gui.set_text(gui.get_node("qlt"), light_and_shadows.shadow and "On" or "Off")
    gui.set_text(gui.get_node("up"), light_and_shadows.upscale and "On" or "Off")
    gui.set_text(gui.get_node("demo"), "("..current_example.."/"..total..")")
end

function init(self)

    -- Simple input. Registre the 'next' button hundler.
    si.acquire()
    si.register("next_example", 
    function()
        current_example = current_example + 1
        if current_example > total then current_example = 1 end
        monarch.show(hash(current_example), {clear = true, sequential = true}) 
        text_upd()
    end)

    si.register("quality", function()
        light_and_shadows.shadow = not light_and_shadows.shadow
        text_upd()
    end)
    si.register("upscale", function()
        light_and_shadows.upscale = not light_and_shadows.upscale
        text_upd()
    end)
    text_upd()

    -- The UI scaling depends on the window resolution.
    local function resize()
        local x, y, zoom = virtual_stick.get_aspect_ratio()
        local scale = vmath.vector3(zoom, zoom, 1)
        -- print("next", scale)
        gui.set_scale(gui.get_node("corner0"), scale)
        gui.set_scale(gui.get_node("corner1"), scale)
        gui.set_scale(gui.get_node("corner2"), scale)
    end

    broadcast.register("WINDOW_RESIZED", resize)
    resize()

    broadcast.register("SHOW", function(message)
        current_example = message.first
        total = message.total
        monarch.show(hash(current_example))
        text_upd()
    end)
end

function final(self)
    broadcast.unregister_all()
    si.unregister()
    si.release()
end

function update(self, dt)
    self.frames = self.frames or 0
    self.delta = self.delta or 0
    self.delta = self.delta + dt
    self.frames = self.frames + 1
    if self.delta >= 1 then
        self.delta = self.delta - math.floor(self.delta)
        gui.set_text(gui.get_node("fps"), self.frames)
        self.frames = 0
    end 
   
end

function on_message(self, message_id, message, sender)
    if broadcast.on_message(message_id, message, sender) then
        -- message was handled
        return
    end
end

function on_input(self, action_id, action)
    if si.on_input(self, action_id, action) then
        -- input message was handled
        return true
    end
end


