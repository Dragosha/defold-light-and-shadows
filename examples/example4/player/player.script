-- Player controller

local inputmapper = require 'examples.example4.player.inputmapper'
local broadcast = require "helper.broadcast"
local common    = require 'helper.common'

local FRICTION = 0.1
local ACCEL = 0.2
local SPEED_MAX = 0.45
local ONGROUND = 10
local MIN = -3
local JUMP = 2.6
local GRAV = 0.15
local BOUNCE = 0.2

local h = inputmapper.h

function init(self)
    self.air_timer = 0
    self.lock = 0

    self.onground = ONGROUND
    self.move = vmath.vector3()
    self.correction = vmath.vector3()
    self.dir = vmath.vector3(1,0,0)
    self.jump_dt = 0

    self.model = msg.url("view#spinemodel")
    self.view = msg.url("view")
    -- msg.post(".", "acquire_input_focus") -- acquire in inputmapper.init
    self.hero_id = 1
    self.input = inputmapper.init(self, true, self.hero_id)

    print("Player init", msg.url())
    self.position = go.get_position()

    timer.delay(0, false, function() 
        broadcast.send("REGISTER")
    end)

end

function final(self)
    broadcast.send("UNREGISTER")
    broadcast.unregister_all()
    msg.post(".", "release_input_focus")
end

local spine_animation_done = hash("spine_animation_done")
local spine_event = hash("spine_event")
local function spine_cb(self, message_id, message, sender)
    if message_id == spine_event then
        -- if message.event_id == then
        -- end
    elseif message_id == spine_animation_done then
    end
end
-- available animations list 
local animations = {
    idle 	= {anim = hash("idle"), playback = go.PLAYBACK_LOOP_FORWARD, options = { blend_duration = 0.25, playback_rate = 1 }},
    run 	= {anim = hash("walk"), playback = go.PLAYBACK_LOOP_FORWARD, options = { blend_duration = 0.25, playback_rate = 1.1 }, cb = spine_cb},
}

-- Flip
local function flip_view(self)
    if self.dir.x == -1 then
        -- sprite.set_hflip(self.sprite, true)
        go.set(self.view, "scale.x", -1)
    else
        -- sprite.set_hflip(self.sprite, false)
        go.set(self.view, "scale.x", 1)
    end
end

-- Set your animation here:
local function set_animation(self, value)
    if self.current_animation ~= value then
        spine.play_anim(self.model, value.anim, value.playback, value.options, value.cb)
        -- sprite.play_flipbook(self.sprite, value.anim)
        self.current_animation = value
    end
end

local function animation(self, dt)
    if self.move.x ~= 0 or self.move.z ~=0 then
        set_animation(self, animations.run)
    else
        set_animation(self, animations.idle)
    end

    flip_view(self)
end

local function dust_particle(self)
    if self.onground > 0 and not self.dust and self.move.x ~= 0 then
        self.dust = true
        particlefx.play("#dust")
    elseif (self.onground == 0 and self.dust) or self.move.x == 0 then
        self.dust = false
        particlefx.stop("#dust")
    end
end

local from = vmath.vector3()
local temp = vmath.vector3()
local DEFAULT = { hash("default") }
local PLATFORM = { hash("platform") }
local CLOSEST = { all = false }

local function platform(self)
    local pos = self.position

    from.x = pos.x
    from.y = pos.y + .5
    from.z = pos.z
    temp.x = pos.x
    temp.y = pos.y - 8
    temp.z = pos.z
    self.prev_on_ground = self.on_ground

    local results2 = physics.raycast(from, temp, PLATFORM, CLOSEST)
    if results2 ~= nil then
        for _, result in ipairs(results2) do
            self.on_platform = true
            self.platform_normal = result.normal
            self.platform_id = result.id
        end
    else
        self.on_platform = false
        self.platform_id = nil
    end

    -- movable platform
    if self.on_platform and self.platform_id then
        local curpos = go.get_world_position(self.platform_id)
        if self.prev_platform_pos then
            self.movable_velocity = curpos - self.prev_platform_pos 
            -- print(self.movable_velocity)
        end
        self.prev_platform_pos = curpos
    else
        self.movable_velocity = nil
        self.prev_platform_pos = nil
    end
end

local function collision(self, message)
    if message.distance > 0 then
        local proj = vmath.project(self.correction, message.normal * message.distance)
        if proj < 1 then
            local comp = (message.distance - message.distance * proj) * message.normal
            local newpos = go.get_position() + comp
            newpos.y = 0
            go.set_position(newpos)
            self.correction = self.correction + comp

            -- if math.abs(message.normal.x) == 1 then self.move.x = 0 end
            if message.normal.y > 0.5 then
                if self.air_timer > .2 then
                    local gain = self.air_timer
                    if gain > 1 then gain = 1 end
                    common.play_sound("landing", common.pan(self.position, gain))

                    if self.air_timer > .3 then
                        -- particlefx.play("#landing")
                        -- go.set(".", "scale.y", 1)
                        -- go.animate(".", "scale.y", go.PLAYBACK_ONCE_PINGPONG, math.max(0.7 - self.air_timer/10, 0.5), go.EASING_INCUBIC, .2)
                        if self.air_timer > .5 then 
                            -- SHAKE CAMERA
                        end
                    end
                end
                self.air_timer = 0
                self.move.y = 0
                self.onground = ONGROUND
                self.jumping = false
                self.allow_wall_jump = true
            elseif message.normal.y < -0.8 then
                self.move.y = -BOUNCE
            end

        end
    end
end

local function coins(self, message)
    if message.enter and message.other_group == hash("coin") then
        common.play_sound("button", common.pan(self.position, 1))
        ---
        local x, y, z = common.world_to_screen(self.position, "/camera#camera")
        broadcast.send("coin_found", {sx = x, sy = y})
        go.delete(message.other_id)
        ---
    end
end


local trigger_response = hash("trigger_response")
local contact_point_response = hash("contact_point_response")
local fmap = {
}

function on_message(self, message_id, message, sender)
    if inputmapper.on_message(self, message_id, message, sender, fmap) then
        -- if game.virtual_gamepad_visible then
        -- 	inputmapper.gamepad_lookat(self)
        -- end
    elseif message_id == contact_point_response then
        collision(self, message)
    elseif message_id == trigger_response then
        coins(self, message)
    end
end

local function moving(self, dt)
    local move_dt = self.move * 60 * dt
    -- if self.lock < 1 then move_dt.z = 0 end
    local pos = go.get_position() + move_dt

    if self.movable_velocity then
        pos = pos + self.movable_velocity
    end

    -- if self.lock < 1 then pos.z = 0.0 end
    go.set_position(pos)

    self.position = pos
end

local function friction(self)
    if self.move.x > 0 then self.move.x = self.move.x - FRICTION
        if self.move.x < 0 then self.move.x = 0 end
    elseif self.move.x < 0 then self.move.x = self.move.x + FRICTION
        if self.move.x > 0 then self.move.x = 0 end
    end
    if self.move.z > 0 then self.move.z = self.move.z - FRICTION
        if self.move.z < 0 then self.move.z = 0 end
    elseif self.move.z < 0 then self.move.z = self.move.z + FRICTION
        if self.move.z > 0 then self.move.z = 0 end
    end

end

local function gravitation(self)
    self.move.y = self.move.y - GRAV
    if self.move.y < MIN then self.move.y = MIN end
end

local function jump(self, pressed)
    if self.onground > 0 and pressed then
        self.move.y = JUMP
        self.onground = 0
        self.jumping = true

        if self.jump_dt <=0 then
            common.play_sound("jump")
            self.jump_dt = .5
        end
    end

    self.movable_velocity = nil
    self.prev_platform_pos = nil
end


function on_input(self, action_id, action)
    if self.lock > 0 then return end
    inputmapper.on_input(self, action_id, action, fmap)
end

function fixed_update(self, dt)
        platform(self)
        moving(self, dt)
        animation(self, dt)
        dust_particle(self)
        friction(self)
        -- gravitation(self)


        if self.onground > 0 then self.onground = self.onground - 1 end

        self.correction = vmath.vector3()

        if self.lock > 0 then self.lock = self.lock - 1 end
        self.jump_dt = self.jump_dt - dt

        if self.lock > 0 then return end

        local dx = 1
        local dy = 1
        if inputmapper.input == inputmapper.VIRTUAL then
            dx = inputmapper.dx
            dy = inputmapper.dy
        elseif inputmapper.input == inputmapper.GAMEPAD then
            dx = inputmapper.dx
            dy = inputmapper.dy
        end

        if self.input.is_pressed(h.LEFT) then
            self.move.x = self.move.x - ACCEL * dx
            if self.move.x < -SPEED_MAX then self.move.x = -SPEED_MAX end
            self.dir.x = -1
        elseif self.input.is_pressed(h.RIGHT) then
            self.move.x = self.move.x + ACCEL * dx
            if self.move.x > SPEED_MAX then self.move.x = SPEED_MAX end
            self.dir.x = 1
        end
        if self.input.is_pressed(h.UP) then
            self.move.z = self.move.z - ACCEL * dy
            if self.move.z < -SPEED_MAX then self.move.z = -SPEED_MAX end
            self.dir.z = -1
        elseif self.input.is_pressed(h.DOWN) then
            self.move.z = self.move.z + ACCEL * dy
            if self.move.z > SPEED_MAX then self.move.z = SPEED_MAX end
            self.dir.z = 1
        end

        if (self.input.is_pressed(h.JUMP))  then
            -- jump(self, true)
        end

end
