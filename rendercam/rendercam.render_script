
local rendercam = require "rendercam.rendercam"
local light_and_shadows = require "light_and_shadows.light_and_shadows"
local vp = rendercam.viewport

local IDENTITY_MATRIX = vmath.matrix4()
local CLEAR_COLOR = hash("clear_color")
local WINDOW_RESIZED = hash("window_resized")
local UPDATE_WINDOW = hash("update window")

local function update_window(self)
    rendercam.update_window(render.get_window_width(), render.get_window_height())
    self.gui_proj = vmath.matrix4_orthographic(0, rendercam.window.x, 0, rendercam.window.y, -1, 1)
end

function init(self)
    self.tile_pred 	= render.predicate({"tile"})  -- sprites / paricles / spine models (their normal vector looks to the front)
    self.atile_pred = render.predicate({"atile"}) -- floor / ground sprites (normal looks to the up)
    self.btile_pred = render.predicate({"btile"}) -- fog sprites / not shadowcaster
    self.gui_pred 	= render.predicate({"gui"})
    self.text_pred 	= render.predicate({"text"})
    self.model_pred = render.predicate({"model"})
    self.particle_pred = render.predicate({"particle"})
    self.shadow_pred = render.predicate({"shadow"}) -- all objects that have to cast shadows

    self.clear_color = vmath.vector4(0)
    self.constants = render.constant_buffer()

    rendercam.configWin.x = render.get_width()
    rendercam.configWin.y = render.get_height()
    rendercam.update_window_size(render.get_window_width(), render.get_window_height())
    update_window(self)

    --
    light_and_shadows.init(self)
    --
end

function update(self)
    --
    light_and_shadows.update(self)
    --

    render.set_depth_func(render.COMPARE_FUNC_LESS)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    render.set_viewport(vp.x, vp.y, vp.width, vp.height)

    local view = rendercam.calculate_view()
    local proj = rendercam.calculate_proj()
    local frustum = {frustum = proj * view, constants = self.constants}
    render.set_view(view)
    render.set_projection(proj)

    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)

    -- 3D
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)
    if light_and_shadows.shadow_quality <  3 then
        render.enable_texture(1, self.shadowmap_buffer, render.BUFFER_COLOR_BIT) -- created in light_and_shadows.init
    end
    if light_and_shadows.shadow_quality == 2 then render.enable_material("model_low")
    elseif light_and_shadows.shadow_quality == 3 then render.enable_material("model_extra_low") end
    render.draw(self.model_pred, frustum)
    if light_and_shadows.shadow_quality > 1 then render.disable_material() end
    
    -- 2D
   
    render.disable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    if light_and_shadows.shadow_quality == 2 then render.enable_material("sprite_back_low")
    elseif light_and_shadows.shadow_quality == 3 then render.enable_material("sprite_back_extra_low") end
    render.draw(self.atile_pred, frustum) -- floor / ground sprites
    if light_and_shadows.shadow_quality > 1 then render.disable_material() end
    if light_and_shadows.shadow_quality == 2 then render.enable_material("sprite_low")
    elseif light_and_shadows.shadow_quality == 3 then render.enable_material("sprite_extra_low") end
    render.draw(self.tile_pred, frustum) -- common sprites
    if light_and_shadows.shadow_quality > 1 then render.disable_material() end
    if light_and_shadows.shadow_quality <  3 then
        render.disable_texture(1)
    end

    render.set_depth_mask(false)
    render.draw(self.btile_pred, frustum) 
    render.draw(self.particle_pred)
    
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

    -- Debug rendering - physics debug, draw_line
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_CULL_FACE)
    render.draw_debug3d()

    -- GUI Rendering
    render.set_viewport(0, 0, rendercam.window.x, rendercam.window.y)
    render.set_view(IDENTITY_MATRIX)
    render.set_projection(self.gui_proj) -- gui_proj only calculated on update_window

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred) -- Includes debug text from "draw_text" messages.
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message, sender)
    if message_id == CLEAR_COLOR then
        self.clear_color = message.color
    elseif message_id == WINDOW_RESIZED then -- sent by engine
        update_window(self)
    elseif message_id == UPDATE_WINDOW then -- sent by rendercam when a camera is activated ("window_resized" engine message requires data)
        update_window(self)
    end
end
