local light = require 'light_and_shadows.light'

go.property("color", vmath.vector4(1, 1, 1, 1))
go.property("power", 100)
go.property("light_on", true)
go.property("static", true)
go.property("direct", false)
go.property("angle", 25)
go.property("smoothness", .3)
go.property("static_spot", true)

go.property("fxurl", msg.url())
go.property("startfx", false)
go.property("rotate", false)

go.property("num", -1)

-- The script adds a new point light source to the list of all light sources.
-- 'Color' of the light source. Red Green Blue. 
-- You may use a negative values as well as values > 1.0 for override final color of pixel when all light sources are blending. 
-- 'Power' of the light source where 100 is normal 100 Watt bulb (just for reference).
-- Also you may auto start particle FX attached to this game object and referenced in fxurl.
-- 'Rotate' set it to true is this object need to follow the camera rotating (works as Bilboard).

-- The light source can moving around the game world. Position of the source are calculating in the lights manager script. 
-- So, in this script we don't need to call update() method. Just set 'static' value to false. 
-- Otherwise leave static value as 'true' for performance reason.

-- 'Direct' is spotlight. On | off.
-- 'Angle' is cone size for the shader calculations. In degrees.
-- 'Smoothness' - how softly you want to blur the edges of the cone. From 0.0 to 1.0
-- 'Static_spot' - do you need to change spotlight direction in runtime? If 'true' the direction being calculation once
-- for performance reason.

-- Num. Is bulb has a positive number then this light source does not participate in sort by distance from the screen center.
-- It always is visible. Ofcourse if amount of all bulbs is less than MAX light sources values (X in this demo).
-- Default value is -1. This bulbs have sorted in the light manager script and you may add bulb as much as you need.
-- But only first N are going to the shader. 

-- To efficiently use uniforms to pass parameters to the shader, some values are packed into free vector4 spaces:
-- position.w used to pass the 'smoothness' param to the shader
-- direction.w used to enable (angle > 0) spotlight calculation in the shader

function init(self)
    
    if self.light_on then
        if self.power == 0 then self.power = 1 end
        local wp = go.get_world_position()
        local dir = vmath.rotate(go.get_world_rotation(), light.top_v)
        self.obj = {
            value = vmath.vector4(self.color.x, self.color.y, self.color.z, 1/self.power),
            current_value = vmath.vector4(self.color.x, self.color.y, self.color.z, 1/self.power),
            position = vmath.vector4(wp.x, wp.y, wp.z, self.smoothness), -- we need vector4 to forward to the shader
            static = self.static,
            id = go.get_id(),
            num = self.num,
            timer = 0,
            rotate = self.rotate,
            y_offset = 0,
            direction = vmath.vector4(dir.x, dir.y, dir.z, self.direct and math.rad(self.angle) or -1 ),
            static_spot = self.static_spot
        }
        -- ^^^ you may generate this table in your code when you need to add a new bulb.
        -- then add to light.list[id] and remove from this array when bulb time is over.
        
        -- Add to the list of all light sources
        light.list[self.obj.id] = self.obj
    end

    -- start particle effect
    if self.fxurl and self.startfx then 
        particlefx.play(self.fxurl) 
    end

end

function final(self)
    if self.light_on then
        light.list[self.obj.id] = nil
    end
end
