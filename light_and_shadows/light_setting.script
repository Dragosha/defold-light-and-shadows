local light = require 'light_and_shadows.light'

go.property("clear_color", vmath.vector4(0.1, 0.2, 0.15, 0))
go.property("fog_color", vmath.vector4(0.1, 0.2, 0.15, 0))
go.property("fog_density", 0.7)
go.property("fog_min_max", vmath.vector4(10, 200, 1, 1))
go.property("ambient", vmath.vector4(0.4, 0.4, 0.3, 0))
go.property("color_max", 1.3)
go.property("on", true)

-- Special script and module with functions to setup initial light shaders constants and
-- manage the list of light sources during runtime in update function.
-- This script sets constants into constants.lua module. You may do it in your own way.

-- Only you need to do this is setup four vector4 in constants array.
-- 1. Clear color or background color.
-- 2. Fog color. Usually the same as the clear color. 4th component (.w) is the fog density (0 - 1.0). Where 0 is a very high density.
-- 3. Fog minimum and maximum. Z-coord in camera view space where the fog is started.
-- 4. Ambient color. 4th component (ambient.w) used as the maximum value of final color component at each pixels.
-- If the color_max value > 1.0, the places where light sources overlap each other may have an excessive value.
-- In shader it looks like
-- diffuse_light = clamp(diffuse_light, 0.0, ambient.w);
-- final_pixel_color = texture_color * diffuse_light;


function init(self)
    -- light.reset(self)
    self.fog_color.w = self.fog_density
    self.ambient.w = self.color_max
    if self.on then 
        light.set_color(self.fog_color, self.fog_min_max, self.ambient, self.clear_color)
    end
end

function update(self, dt)
    if self.on then
        light.update(self, dt)
    end
end

function final(self)
    light.reset(self)
end
